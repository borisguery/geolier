#!/usr/bin/env bash

usage() {
    cat <<EOF
usage: $0 <command> [-h] [-vvv] [-d] [<args>]

Currently supported commands are:
    create [<username>] Create a new backup user and its jail
    delete [<username>] Remove a backup user and its jail (including its data)
    install             Install jailkit
EOF
}

return_with_error() {
    echo "fatal:" $@ >&2
    exit 1
}

run() {
    if [[ "$VERBOSE" -ge 1 ]]; then
        echo "->" $@
    fi

    if [[ "$DRY_RUN" -eq 0 ]]; then
        if [[ "$VERBOSE" -ge 2 ]]; then
            $@
        else
            $@ > /dev/null 2>&1
        fi
        if [[ "$?" -ne 0 ]]; then
            if [[ "$VERBOSE" -lt 2 ]]; then
               return_with_error "an error occured, run with -vv to debug"
            else
               exit 1
            fi
        fi
    fi
}

create_backup_user() {
    USER=$1
    JAILS_PATH=/srv/jails/
    USER_JAIL_PATH=$JAILS_PATH$USER
    USER_HOME=$USER_JAIL_PATH/home/$USER

    if [[ -z "$USER" ]]; then
        return_with_error  "you must provide an username"
    fi

    id $USER > /dev/null 2>&1 && return_with_error "user $USER already exists"

    run useradd -m -N -g backup -s /usr/sbin/jk_chrootsh $USER
    
    run mkdir $USER_JAIL_PATH
    run chown root:root $USER_JAIL_PATH

    run jk_init -v -j $USER_JAIL_PATH basicshell editors extendedshell netutils ssh uidbasics jk_lsh scp custom

    run jk_jailuser -m -j $USER_JAIL_PATH $USER
  
    run sed -E -i "s/(^$USER:.*:).*\$/\1\/bin\/bash/" $USER_JAIL_PATH/etc/passwd

    tput smcup
    read -p "Enter your public SSH Key, followed by [ENTER]> " SSH_KEY
    tput rmcup
    KEY_FILE=$(mktemp)
    echo $SSH_KEY > $KEY_FILE
    # I had to do it twice because ssh-keygen doesn't errors to STDERR...
    ssh-keygen -l -f $KEY_FILE >/dev/null || return_with_error "invalid ssh key"
    FINGERPRINT=$(ssh-keygen -l -f $KEY_FILE | cut -d\  -f2)
    echo "-> ssh key fingerprint: ($FINGERPRINT)"
    run mkdir $USER_HOME/.ssh/
    run mv $KEY_FILE $USER_HOME/.ssh/authorized_keys
    run chown -R $USER $USER_HOME/.ssh
    run chmod 500 $USER_HOME/.ssh/
    run chmod 600 $USER_HOME/.ssh/authorized_keys
}

delete_backup_user() {
    confirm "Are you TOTALLY sure, it will delete all the existing backups? [y/N] " "[yY]" || { echo "Bye chicken."; exit 0; }

    USER=$1
    JAILS_PATH=/srv/jails/
    USER_JAIL_PATH=$JAILS_PATH$USER
    USER_HOME=$USER_JAIL_PATH/home/$USER

    if [[ -z "$USER" ]]; then
        return_with_error  "you must provide an username"
    fi

    id $USER > /dev/null 2>&1 || return_with_error "user $USER does not exist"

    confirm "Well, I am a bit paranoiac, did you change your mind? [Y/n] " "[nN]" || { echo "I knew it."; exit 0; }

    run userdel $USER
    run rm -fr $USER_JAIL_PATH
}

install_jailkit() {
   TMP_FILE=$(mktemp)
   echo "-> downloading jailkit"
   run curl --progress -o $TMP_FILE http://olivier.sessink.nl/jailkit/jailkit-2.16.tar.bz2
   run cd $(dirname $TMP_FILE)
   run tar xjf $TMP_FILE
   JAILKIT_DIR=$(find /tmp/ -type d -name "*jailkit*" | head -n1)
   run cd $JAILKIT_DIR
   run ./configure
   run make
   confirm "Confirm system-wide installation? [y/N] " "[yY]" || { echo "Ok. you decide."; exit 0; }
}

parse_options() {
    while getopts "hvd" OPTION
    do
        case $OPTION in
            h)
                usage
                exit 1
                ;;
            v)
                VERBOSE=$((VERBOSE+1))
                ;;
            d)
                DRY_RUN=1
                ;;
        esac
    done
}

print_version() {
    local version="${VERSION}"
    if [[ ${REVISION} != '$rev$' ]]; then
        version="${version}r${REVISION}"
    fi

    echo "version: $version"
}

confirm() {
    read -r -p "$1" response
    case $response in
        $2) 
            true
            ;;
        *)
            false
            ;;
    esac
}

exit_if_not_root() {
    [ "$UID" -ne 0 ] && return_with_error "you must be root"
}

VERBOSE=0
DRY_RUN=0
VERSION="0.1"
REVISION='$rev$'

case $1 in
    create)
        exit_if_not_root
        shift
        parse_options $@
        shift $((OPTIND-1)); OPTIND=1
        create_backup_user $@
        exit 0
        ;;
    delete)
        exit_if_not_root
        shift
        parse_options $@
        shift $((OPTIND-1)); OPTIND=1
        delete_backup_user $@
        exit 0
        ;;
    install)
        exit_if_not_root
        shift
        parse_options $@
        shift $((OPTIND-1)); OPTIND=1
        install_jailkit
        exit 0
        ;;
    usage)
        usage
        exit 0
        ;;
    --version)
        print_version
        exit 0
        ;;  
    *)
        usage
        exit 1
        ;;
esac
